using OpenQA.Selenium;
using System;
using TechTalk.SpecFlow;
using TestAutomation.Bindings.StepDefinitions;
using TestAutomation.PageObjects.Pages;

namespace TestAutomation.Features
{
    [Binding]
    public class JourneyPlannerSteps1
    {
        private readonly StepDefinitionExample _StepDefinitionExample;
        private readonly LoginPage _LoginPage;

        internal JourneyPlannerSteps1(StepDefinitionExample stepdef, LoginPage loginPage)
        {
            _StepDefinitionExample = stepdef;
            _LoginPage = loginPage;

        }

        [Given(@"user is on the TfL home page")]
        public void GivenUserIsOnTheTfLHomePage()
        {

            _StepDefinitionExample.GivenTheLoginPageHasBeenLoaded();
           
        }

        [When(@"user plans a journey from London Victoria to London Bridge")]
        public void WhenUserPlansAJourneyFromLondonVictoriaToLondonBridge()
        {
            _LoginPage.InputJourneydetail();
        }

        [Then(@"user should be presented with the Journey Results page with the correct summary")]
        public void ThenUserShouldBePresentedWithTheJourneyResultsPageWithTheCorrectSummary()
        {
            _LoginPage.RequestJourenyConfirmationpage();

        }
        [Then(@"user can see the fastest route")]
        public void ThenUserCanSeeTheFastestRoute()
        {
            _LoginPage.FastestRoute();
        }

        [Given(@"user plans a journey from London Victoria to London Bridge")]
        public void GivenUserPlansAJourneyFromLondonVictoriaToLondonBridge()
        {
            _StepDefinitionExample.GivenTheLoginPageHasBeenLoaded();
            _LoginPage.InputJourneydetail();
        }

        [When(@"user changes the destination to London Waterloo")]
        public void WhenUserChangesTheDestinationToLondonWaterloo()
        {
           
            _LoginPage.EditJourneydetails();
        }


        [When(@"user enters text that does not match a station name into the journey planner")]
        public void WhenUserEntersTextThatDoesNotMatchAStationNameIntoTheJourneyPlanner()
        {
            _LoginPage.IncorrectInputJourneydetail();
        }

        [When(@"user clicks Plan my journey")]
        public void WhenUserClicksPlanMyJourney()
        {
            _LoginPage.clickonPLanMyJourney();

        }

        [Then(@"user should be presented with the Journey Results page with an error message")]
        public void ThenUserShouldBePresentedWithTheJourneyResultsPageWithAnErrorMessage()
        {
            _LoginPage.RequestJourenyConfirmationpage_Eror();
            
        }

        [When(@"user tries to plan a journey without a destination")]
        public void WhenUserTriesToPlanAJourneyWithoutADestination()
        {
            _LoginPage.IncorrectInputJourneydetail_withoutdestiantion();
        }


        [Then(@"user sees an error message telling them that the To field is required")]
        public void ThenUserSeesAnErrorMessageTellingThemThatTheToFieldIsRequired()
        {
            _LoginPage.withoutdestinationerror();
        }

    }
}
